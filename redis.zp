(load "redis/resp")
(import-all "resp")

(define-struct redis (ip port socket))

(defimpl stringify redis:redis?
         ((->string (lambda (r) (++ "<redis-server on " (redis:get-ip r)
                                    ":" (->string (redis:get-port r)) ">")))))

(defkeywords (redis:new) (:ip :default "127.0.0.1"
                          :port :default 6379)
  "create a new redis server instance.

   params:
    - args: keyword args (:ip, default <zepto>\"127.0.0.1\"<zepto>; :port, default <zepto>6379</zepto>
   complexity: O(1)
   returns: a redis server instance"
  (let ((s (net:socket "stream")))
    (begin
      (net:connect s (net:get-addr-info ip (->string port)))
      (redis:make-redis ip port s))))

(define (redis:send-command redis command . args)
  "sends <par>command</par> to the server <par>redis</par>.
   All other arguments will be encoded and piped through.

   params:
    - redis: a redis server instance as created by <fun>redis:new</fun>
    - command: the command string (e.g. <zepto>\"PING\"</zepto>)
    - args: the rest of the arguments (as varargs)
   complexity: O(n)
   returns: the result of sending through the socket"
  (let ((send (lambda (a) (net:send (redis:get-socket redis) (string->byte-vector a)))))
    (if (null? args)
      (send (++ command "\r\n"))
      (send (resp:encode (++ (list command) args))))))

(define (redis:get-response redis)
  "get a response from the server <par>redis</par>.

   params:
    - redis: a redis server instance as created by <fun>redis:new</fun>
   complexity: O(n) where n is the size of the response
   returns: the decoded response"
  (let loop ((res b{}))
    (if (eq? (mod (length res) 1024) 0)
      (loop (++ res (net:recv (redis:get-socket redis) (make-small 1024))))
      (resp:decode (byte-vector->string res)))))

(define-syntax define-redis
  (syntax-rules ()
    ((_ cmd)
      (with-environment env
        (eval `(define (,(string->symbol (++ "redis:" (->string 'cmd))) redis)
          ,(++ "sends a " (->string 'cmd) " to the server <par>redis</par>.
                For a description of the command, please look <a href=\"http://redis.io/commands/"
                (->string 'cmd) "\">here</a>.

                params:
                 - redis: the redis server
                complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
                returns: the result of <fun>redis:get-response</fun>")
          (begin
            (redis:send-command redis ,(string:upper-case (->string 'cmd)))
            (redis:get-response redis))) env)))
    ((_ cmd args)
      (with-environment env
        (eval
          `(define ,(++ [] (string->symbol (++ "redis:" (->string 'cmd))) 'redis 'args)
            ,(++ "sends a " (->string 'cmd) " to the server <par>redis</par>.
                  For a description of the command, please look <a href=\"http://redis.io/commands/"
                  (->string 'cmd) "\">here</a>.

                  params:
                   - redis: the redis server
                  complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
                  returns: the result of <fun>redis:get-response</fun>")
            (begin
              ,(++ [] 'redis:send-command 'redis (string:upper-case (->string 'cmd)) 'args)
              (redis:get-response redis))) env)))))

(define-redis quit)
(define-redis auth password)
(define-redis echo msg)
(define-redis select index)
(define-redis exist keys)
(define-redis get key)
(define-redis mget keys)
(define-redis mset data)
(define-redis msetnx data)
(define-redis incr key)
(define-redis decr key)
(define-redis del key)
(define-redis spop key)
(define-redis srandmember key)
(define-redis scard key)
(define-redis sinter keys)
(define-redis sunion keys)
(define-redis sdiff keys)
(define-redis smembers key)
(define-redis set (key value))
(define-redis getset (key value))
(define-redis incrby (key value))
(define-redis decrby (key value))
(define-redis setnx (key value))
(define-redis lrange (key min max))
(define-redis ltrim (key start end))
(define-redis lindex (key index))
(define-redis lset (key index value))
(define-redis lpop (key string))
(define-redis rpop (key string))
(define-redis blpop (keys timeout))
(define-redis brpop (keys timeout))
(define-redis rpoplpush (src dest))
(define-redis sadd (key member))
(define-redis srem (key member))
(define-redis smove (srckey destkey member))
(define-redis sismember (key member))
(define-redis sinterstore (destkey srckeys))
(define-redis sunionstore (destkey srckeys))
(define-redis sdiffstore (destkey srckeys))
(define-redis zadd (key data))
(define-redis zrem (key member))
(define-redis zincrby (key incr member))
(define-redis zrange (key start end))
(define-redis zrevrange (key start end))
(define-redis zrangebyscore (key min max))
(define-redis zremrangebyscore (key min max))
(define-redis zcard key)
(define-redis zscore (key member))
(define-redis zlexcount (key min max))
(define-redis zrangebylex (key min max))
(define-redis zinterstore (dest keys))
(define-redis zcount (key min max))
(define-redis zrevrank (key member))
(define-redis zrevrangebyscore (key max min))
(define-redis zremrangebyrank (key start stop))
(define-redis zremrangebylex (key min max))
(define-redis zunionstore (dest keys))
(define-redis hmset (key data))
(define-redis hvals key)
(define-redis hdel (key fields))
(define-redis hsetnx (key field value))
(define-redis hget (key field))
(define-redis hgetall key)
(define-redis hincrby (key field increment))
(define-redis hexists (key field))
(define-redis hkeys key)
(define-redis hlen key)
(define-redis concat (key value))
(define-redis strlen key)
(define-redis bitcount (key start end))
(define-redis bitop (operation destkey key))
(define-redis watch key)
(define-redis unwatch)
(define-redis getrange (key start end))
(define-redis type key)
(define-redis keys pattern)
(define-redis randomkey)
(define-redis rename (oldkey newkey))
(define-redis renamex (oldkey newkey))
(define-redis config-get parameter)
(define-redis config-set (parameter value))
(define-redis config-rewrite)
(define-redis config-resetstat)
(define-redis dbsize)
(define-redis expire (key seconds))
(define-redis expireat (key unixtime))
(define-redis ttl key)
(define-redis move (key index))
(define-redis flushdb)
(define-redis flushall)
(define-redis save)
(define-redis bgsave)
(define-redis lastsave)
(define-redis bgrewriteaof)
(define-redis shutdown)
(define-redis info)
(define-redis monitor)
(define-redis slaveof (host port))
(define-redis subscribe channel)
(define-redis publish (channel msg))
(define-redis unsubscribe channel)
(define-redis psubscribe pattern)
(define-redis punsubscribe pattern)

; special cases

(define (redis:ping redis . msg)
  "sends a ping to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (apply redis:send-command (++ [] redis "PING" msg))
    (redis:get-response redis)))

(define (redis:lpush redis key value)
  "sends a lpush to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "LPUSH" (++ [] key value))
    (redis:get-response redis)))

(define (redis:rpush redis key value)
  "sends a rpush to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "RPUSH" (++ [] key value))
    (redis:get-response redis)))

(defkeywords (bitcount redis key) (:start :default "0"
                                   :end :default (->string (length key)))
  "sends a bitcount to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "BITCOUNT" (++ [] key start end))
    (redis:get-response redis)))

(define (bitop operation destkey . keys)
  "sends a bitop to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "BITOP" (++ [] operation destkey keys))
    (redis:get-response redis)))

(defkeywords (redis:bitpos redis key bit) (:start :default (list)
                                           :end :default (list))
  "sends a bitpos to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "BITPOS" (++ [] key bit start end))
    (redis:get-response redis)))

(defkeywords (redis:object redis subcommand) (:args :default ())
  "sends a object to the server <par>redis</par>.
   For a description of the command, please look <a href=\"http://redis.io/commands/ping\">here</a>.

   params:
    - redis: the redis server
   complexity: the combined complexity of <fun>redis:send-command</fun> and <fun>redis:get-reponse</fun>
   returns: the result of <fun>redis:get-response</fun>"
  (begin
    (redis:send-command redis "OBJECT" (++ [] subcommand args))
    (redis:get-response redis)))
