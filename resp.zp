(module "resp"
  (export
    `("encode" ,encode)
    `("decode" ,decode))

  (REDIS-SEP "\r\n")

  (redis-string (lambda (obj)
    (++ obj REDIS-SEP)))

  (encode (lambda (obj)
    (cond
      ((string? obj) (encode-string obj))
      ((byte-vector? obj) (encode-string (byte-vector->string obj)))
      ((or (list? obj) (vector? obj)) (encode-array obj))
      ((integer? obj) (encode-integer obj))
      (else ""))))

  (encode-integer (lambda (obj)
    (redis-string (++ ":" (->string obj)))))

  (encode-array (lambda (obj)
    (++ (redis-string (++ "*" (->string (length obj))))
        (apply ++ (for-each encode obj)))))

  (encode-string (lambda (obj)
    (++ (redis-string (++ "$" (->string (length obj))))
        (redis-string obj))))

  (decode (lambda (obj)
    (if (null? obj)
      obj
      (case (car obj)
        ((#\+) (decode-simple-string (cdr obj)))
        ((#\-) (decode-error (cdr obj)))
        ((#\$) (decode-bulk-string (cdr obj)))
        ((#\:) (decode-integer (cdr obj)))
        ((#\*) (decode-array (cdr obj)))
        (else "")))))

  (strip-redis-string (lambda (obj)
    (car (strip-redis-strings obj))))

  (strip-redis-strings (lambda (obj)
    (string:split obj REDIS-SEP)))

  (decode-simple-string strip-redis-string)

  (decode-error ($ (make-error (strip-redis-string %))))

  (decode-integer (compose string->integer strip-redis-string))

  (decode-bulk-string (lambda (obj) "it does not do length-checking!"
    (if (string:starts-with obj "-1\r\n")
      (nil)
      (string:join (cdr (strip-redis-strings obj)) #\newline))))

  (decode-array (lambda (obj)
    (define (treat-array len elems acc)
      (if (zero? len)
        (list acc elems)
        (let ((fst (car elems)))
          (case (car fst)
            ((#\$)
              (let* ((l (string->number (cdr fst))))
                (if (eq? l -1)
                  (treat-array (sub1 len) (cdr elems) (++ acc (nil)))
                  (treat-array (sub1 len) (cddr elems)
                               (++ acc (decode (++ fst "\r\n"
                                                   (cadr elems) "\r\n")))))))
            ((#\*)
              (let* ((l (string->number (cdr fst)))
                     (a (treat-array l (cdr elems) [])))
                (treat-array (sub1 len) (cadr a) (+= acc (car a)))))
            (else
              (treat-array (sub1 len) (cdr elems) (++ acc (decode fst))))))))
    (let ((stripped (strip-redis-strings obj)))
      (car (treat-array (string->number (car stripped))
                        (cdr stripped)
                        []))))))
